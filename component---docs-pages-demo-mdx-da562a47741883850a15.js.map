{"version":3,"sources":["webpack:///../docs/pages/demo.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"whBASO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qFACA,0CAAyB,0BAAYC,WAAW,KAAvB,kBAAzB,qBAAyG,0BAAYA,WAAW,KAAvB,kBAAzG,oFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sCAIL,YAAC,IAAD,CAAsBD,QAAQ,yBAC9B,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,szBA+BL,iBAAQ,CACN,GAAM,mBADR,mBAGA,oFACA,YAAC,IAAD,CAAiBD,QAAQ,oBACzB,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,y0B,4LAqCTJ,EAAWK,gBAAiB","file":"component---docs-pages-demo-mdx-da562a47741883850a15.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/pranesh.g/Documents/opensource/use-key-capture-2/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport GlobalComponent from '../Components/GlobalEventComponent.js';\nimport TargetEventComponent from '../Components/TargetEventComponent.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"target-listener\"\n    }}>{`Target Listener`}</h2>\n    <p>{`Listen only for the key-press event for a particular target.`}</p>\n    <p>{`It is provided by `}<inlineCode parentName=\"p\">{`getTargetProps`}</inlineCode>{` props getter. If `}<inlineCode parentName=\"p\">{`getTargetProps`}</inlineCode>{` props getter is not provided, then it will listen for key-press event globally.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<input {...getTargetProps()} />\n`}</code></pre>\n    <TargetEventComponent mdxType=\"TargetEventComponent\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport useKey from 'use-key-capture';\nimport './styles.css';\n\nconst displayKeys = ['Q', 'W', 'E', 'R', 'T', 'Y', 'Backspace'];\n\nconst TargetEventComponent = () => {\n  const { keyData, getTargetProps } = useKey();\n\n  const getIsActive = key => (keyData.key === key ? 'active' : '');\n\n  return (\n    <div className=\"container-target\">\n      <div className=\"message\">\n        Type QWERTY in the input element below. If the focus is outside the\n        target, we won't see any change.\n      </div>\n      <input {...getTargetProps()} />\n      <div className=\"container\">\n        {displayKeys.map(key => {\n          return <div className={\\`box \\${getIsActive(key)}\\`}>{key}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default TargetEventComponent;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"global-listener\"\n    }}>{`Global Listener`}</h2>\n    <p>{`If no target is specified, it will listen for global event.`}</p>\n    <GlobalComponent mdxType=\"GlobalComponent\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport useKey from 'use-key-capture';\nimport './styles.css';\n\nconst displayKeys = ['Enter', 'Escape', 'Tab', 'ArrowUp'];\n\nconst GlobalComponent = () => {\n  const { keyData } = useKey();\n\n  const getIsActive = key => (keyData.key === key ? 'active' : '');\n\n  const getCombinedActiveClass = () =>\n    keyData.key === 'A' && keyData.isWithShift ? 'active' : '';\n\n  return (\n    <>\n      <div className=\"message\">\n        Press below mentioned keys to see the hook in action\n      </div>\n      <div className=\"container\">\n        {displayKeys.map(key => {\n          return <div className={\\`box \\${getIsActive(key)}\\`}>{key}</div>;\n        })}\n        <div className={\\`box \\${getCombinedActiveClass()}\\`}>Shift + A</div>\n      </div>\n    </>\n  );\n};\n\nexport default GlobalComponent;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}