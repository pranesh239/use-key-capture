(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"2ddg":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS"),s=(n("ZFoC"),n("avNj")),o=n("ophO");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/pages/demo.mdx"}});var l={_frontmatter:c},p=r.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(p,i({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"target-listener"},"Target Listener"),Object(a.b)("p",null,"Listen only for the key-press event for a particular target."),Object(a.b)("p",null,"It is provided by ",Object(a.b)("inlineCode",{parentName:"p"},"getTargetProps")," props getter. If ",Object(a.b)("inlineCode",{parentName:"p"},"getTargetProps")," props getter is not provided, then it will listen for key-press event globally."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-jsx"}),"<input {...getTargetProps()} />\n")),Object(a.b)(o.a,{mdxType:"TargetEventComponent"}),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport useKey from 'use-key-capture';\nimport './styles.css';\n\nconst displayKeys = ['Q', 'W', 'E', 'R', 'T', 'Y', 'Backspace'];\n\nconst TargetEventComponent = () => {\n  const { keyData, getTargetProps } = useKey();\n\n  const getIsActive = key => (keyData.key === key ? 'active' : '');\n\n  return (\n    <div className=\"container-target\">\n      <div className=\"message\">\n        Type QWERTY in the input element below. If the focus is outside the\n        target, we won't see any change.\n      </div>\n      <input {...getTargetProps()} />\n      <div className=\"container\">\n        {displayKeys.map(key => {\n          return <div className={`box ${getIsActive(key)}`}>{key}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default TargetEventComponent;\n")),Object(a.b)("h2",{id:"global-listener"},"Global Listener"),Object(a.b)("p",null,"If no target is specified, it will listen for global event."),Object(a.b)(s.a,{mdxType:"GlobalComponent"}),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport useKey from 'use-key-capture';\nimport './styles.css';\n\nconst displayKeys = ['Enter', 'Escape', 'Tab', 'ArrowUp'];\n\nconst GlobalComponent = () => {\n  const { keyData } = useKey();\n\n  const getIsActive = key => (keyData.key === key ? 'active' : '');\n\n  const getCombinedActiveClass = () =>\n    keyData.key === 'A' && keyData.isWithShift ? 'active' : '';\n\n  return (\n    <>\n      <div className=\"message\">\n        Press below mentioned keys to see the hook in action\n      </div>\n      <div className=\"container\">\n        {displayKeys.map(key => {\n          return <div className={`box ${getIsActive(key)}`}>{key}</div>;\n        })}\n        <div className={`box ${getCombinedActiveClass()}`}>Shift + A</div>\n      </div>\n    </>\n  );\n};\n\nexport default GlobalComponent;\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/pages/demo.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-pages-demo-mdx-da562a47741883850a15.js.map